---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: pac-demo
  annotations:
    # updated by git push
    # The event we are targeting as seen from the webhook payload
    # this can be an array too, i.e: [pull_request, push]
    pipelinesascode.tekton.dev/on-event: "[[pull_request, push]]"

    # The branch or tag we are targeting (ie: main, refs/tags/*)
    pipelinesascode.tekton.dev/on-target-branch: "[tektonci]"

    # Fetch the git-clone task from hub, we are able to reference later on it
    # with taskRef and it will automatically be embedded into our pipeline.
    pipelinesascode.tekton.dev/task: "git-clone"

    # Use maven task from hub
    #
    # pipelinesascode.tekton.dev/task-1: "maven"

    # You can add more tasks by increasing the suffix number, you can specify them as array to have multiple of them.
    # browse the tasks you want to include from hub on https://hub.tekton.dev/
    #
    # pipelinesascode.tekton.dev/task-2: "[curl, buildah]"

    # How many runs we want to keep.
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    # The variable with brackets are special to Pipelines as Code
    # They will automatically be expanded with the events from Github.
    - name: repo_url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    workspaces:
      - name: workspace
#      - name: basic-auth
    tasks:
      - name: source-clone
        taskRef:
         name: git-clone
         kind: ClusterTask
        workspaces:
         - name: output
           workspace: workspace
        params:
         - name: url
           value: https://github.com/gamagnolo/spring-petclinic
         - name: revision
           value: main
         - name: depth
           value: "0"
         - name: subdirectory
           value: spring-petclinic
         - name: deleteExisting
           value: "true"
      - name: unit-tests
        taskRef:
          name: maven
        runAfter:
          - source-clone
        workspaces:
         - name: source
           workspace: workspace
         - name: maven-settings
           workspace: maven-settings
        params:
        - name: GOALS
          value: ["package", "-f", "spring-petclinic"]
     # - name: fetch-repository
     #   taskRef:
     #     name: git-clone
     #     kind: ClusterTask
     #   workspaces:
     #     - name: output
     #       workspace: workspace
 #         - name: basic-auth
 #          workspace: basic-auth
     #   params:
     #     - name: url
     #       value: $(params.repo_url)
     #     - name: revision
     #       value: $(params.revision)
      # Customize this task if you like, or just do a taskRef
      # to one of the hub task.
      #- name: noop-task
      #  runAfter:
      #    - fetch-repository
      #  workspaces:
      #    - name: source
      #      workspace: workspace
      #  taskSpec:
      #    workspaces:
      #      - name: workspace
      #    steps:
      #      - name: noop-task
      #        image: registry.access.redhat.com/ubi9/ubi-micro
      #        workingDir: $(workspaces.source.path)
      #        script: |
      #          exit 0
  workspaces:
  - name: workspace
    volumeClaimTemplate:
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
  - name: maven-settings
    configMap:
       name: maven-settings
  # This workspace will inject secret to help the git-clone task to be able to
  # checkout the private repositories
  #- name: basic-auth
  #  secret:
  #    secretName: "{{ git_auth_secret }}"
